{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","username","text","className","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","props","roomId","messages","map","message","index","key","senderId","parts","payload","content","React","Component","SendMessageForm","handleChange","e","console","log","target","value","setState","handleSubmit","preventDefault","sendMessage","state","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","rooms","sort","room","active","id","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","createRoom","required","App","getRooms","currentUser","getJoinableRooms","then","joinableRooms","joinedRooms","catch","err","subscribeToRoomMultipart","hooks","onMessage","error","sendSimpleMessage","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d03829f3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Message = ({ username, text }) => {\r\n  return (\r\n    <div className=\"message\">\r\n      <div className=\"message-username\">{username}</div>\r\n      <div className=\"message-text\">{text}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Message from './Message';\r\n\r\nclass MessageList extends React.Component {\r\n  componentWillUpdate() {\r\n    const node = ReactDOM.findDOMNode(this);\r\n    this.shouldScrollToBottom =\r\n      node.scrollTop + node.clientHeight + 100 >= node.scrollHeight;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.shouldScrollToBottom) {\r\n      const node = ReactDOM.findDOMNode(this);\r\n      node.scrollTop = node.scrollHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.roomId) {\r\n      return (\r\n        <div className=\"message-list\">\r\n          <div className=\"join-room\">&larr; Join a room!</div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"message-list\">\r\n        {this.props.messages.map((message, index) => {\r\n          return (\r\n            <Message\r\n              key={index}\r\n              username={message.senderId}\r\n              text={message.parts[0].payload.content}\r\n            />\r\n          );\r\n        })}\r\n        <div className=\"help-text\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n","import React from 'react';\r\n\r\nclass SendMessageForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: '',\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    console.log(e.target.value);\r\n    this.setState({\r\n      message: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.sendMessage(this.state.message);\r\n    this.setState({ message: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"send-message-form\" onSubmit={this.handleSubmit}>\r\n        <input\r\n          disabled={this.props.disabled}\r\n          onChange={this.handleChange}\r\n          value={this.state.message}\r\n          placeholder=\"Type your message and hit ENTER\"\r\n          type=\"text\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SendMessageForm;\r\n","import React from 'react';\r\n\r\nclass RoomList extends React.Component {\r\n  render() {\r\n    const orderedRooms = [...this.props.rooms].sort();\r\n\r\n    return (\r\n      <div className=\"rooms-list\">\r\n        <ul>\r\n          <h3>Your rooms:</h3>\r\n          {orderedRooms.map((room, index) => {\r\n            const active = this.props.roomId === room.id ? 'active' : '';\r\n            return (\r\n              <li key={room.id} className={'room ' + active}>\r\n                <a\r\n                  onClick={() => {\r\n                    this.props.subscribeToRoom(room.id, index);\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  # {room.name}\r\n                </a>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoomList;\r\n","import React from 'react';\r\n\r\nclass NewRoomForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      roomName: '',\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      roomName: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.createRoom(this.state.roomName);\r\n    this.setState({ roomName: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-room-form\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            value={this.state.roomName}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Create a room\"\r\n            required\r\n          />\r\n          <button id=\"create-room-btn\" type=\"submit\">\r\n            +\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewRoomForm;\r\n","import React from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport NewRoomForm from './components/NewRoomForm';\n\nimport { tokenUrl, instanceLocator } from './config';\n\nimport './App.css';\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n    };\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: 'anas',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl,\n      }),\n    });\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.currentUser = currentUser;\n        this.getRooms();\n      })\n      .catch(error => {\n        console.error('error on connecting: ', error);\n      });\n  }\n\n  getRooms = () => {\n    this.currentUser\n      .getJoinableRooms()\n      .then(joinableRooms => {\n        this.setState({\n          joinableRooms,\n          joinedRooms: this.currentUser.rooms,\n        });\n      })\n      .catch(err => console.log('error on joinableRooms: ', err));\n  };\n\n  subscribeToRoom = (roomId, index) => {\n    this.setState({ messages: [] });\n    this.currentUser\n      .subscribeToRoomMultipart({\n        roomId: this.currentUser.rooms[index].id,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message],\n            });\n          },\n        },\n      })\n      .then(room => {\n        this.setState({\n          roomId: roomId,\n        });\n        this.getRooms();\n      })\n      .catch(error => console.log('error on subscribing to room: ', error));\n  };\n\n  sendMessage = text => {\n    this.currentUser.sendSimpleMessage({\n      text,\n      roomId: this.state.roomId,\n    });\n  };\n\n  createRoom = name => {\n    let index = 10;\n    this.currentUser\n      .createRoom({\n        name,\n      })\n      .then(room => this.subscribeToRoom(room.id, index++))\n      .catch(err => console.log('error with createRoom: ', err));\n  };\n\n  render() {\n    const { messages } = this.state;\n    return (\n      <div className=\"app\">\n        <RoomList\n          roomId={this.state.roomId}\n          rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n          subscribeToRoom={this.subscribeToRoom}\n        />\n        <MessageList messages={messages} roomId={this.state.roomId} />\n        <SendMessageForm\n          sendMessage={this.sendMessage}\n          disabled={!this.state.roomId}\n        />\n        <NewRoomForm createRoom={this.createRoom} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenUrl =\r\n  'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/af77f820-02ad-4f18-9732-d85f247a9ec2/token';\r\nconst instanceLocator = 'v1:us1:af77f820-02ad-4f18-9732-d85f247a9ec2';\r\nconst secretKey =\r\n  '6d3198ec-3346-42fc-8c08-bc6161c27312:TkmMlk1p+c9TwuByquYUli3c+Xi0pdRmd+9+rostYG4=';\r\nexport { tokenUrl, instanceLocator, secretKey };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}